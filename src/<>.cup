import java_cup.runtime.*;


action code {:
  SemanticAnalyser analyser = new SemanticAnalyser();
  SymbolTable table = new SymbolTable();
  String tipo = new String();
  boolean erro = false;
:};

parser code {:

public void syntax_error(java_cup.runtime.Symbol currToken) {
      System.out.println("Erro de sintaxe na linha: "+(currToken.left+1));
}

:};

/* Terminais (tokens retornados pelo analisador lexico) */
terminal        ADD, SUB, MTP, DIV, MOD, LP, RP, SEMI, LB, RB, IFF, PRNT, FOR, WHILE, ELSE, SCAN, EOL, EOLD, EQ, NEQ, LT, LTE, GTE, GT, NB, CH, ASP;
terminal Double NUMBER;
terminal String STRING;


/* Nao terminais */
non terminal            bloco_função, bloco_string, bloco_comandos, comandos, comando;
non terminal            comando_printf, comando_scanf, comando_iff, comando_for, comando_while, declaracao_de_variavel, atribuicao_de_variavel,  expressao_booleana, tipo, final_linha;
non terminal            operador_aritimetico, operador_booleano, expressao_aritmetica, args;

/* Precedencias */
precedence left ADD, SUB;
precedence left MTP, DIV, MOD;
precedence left RP;


/* Regras de producao da gramatica */

bloco_função ::= bloco_comandos bloco_string:s {: System.out.println("Declaração da função " + s + " detectada"); :}
        | bloco_comandos RP args LP bloco_string:s {: System.out.println("Declaração da função " + s + " detectada"); :}
        ;
args ::= args declaracao_de_variavel
        | declaracao_de_variavel
        ;

bloco_comandos ::= RB comandos LB
        | error     {: System.out.println("Erro de sintaxe no bloco de comando, provavel falta de uma chave"); :}
        ;

comandos ::= comandos comando | comando;

comando ::= comando_printf
        | comando_scanf
        | comando_iff
        | comando_for
        | comando_while
        | declaracao_de_variavel
        | atribuicao_de_variavel
        ;

comando_printf ::= RP bloco_string:s LP PRNT final_linha {: System.out.println("Chamada da Função printf detectada com a string:\t\t"+ s); :};

comando_scanf ::= RP LP SCAN final_linha {: System.out.println("Chamada da Função scanf detectada"); :};


comando_iff ::= RP expressao_booleana:b LP IFF final_linha bloco_comandos {: System.out.println("Chamada da Função iff detectada com expreessao: " + b); :}
        | RP expressao_booleana:b LP IFF final_linha bloco_comandos ELSE final_linha bloco_comandos {: System.out.println("Chamada da Função iff else detectada com expressao: " + b); :}
        ;


comando_for ::= RP declaracao_de_variavel expressao_booleana final_linha atribuicao_de_variavel LP FOR final_linha bloco_comandos {: System.out.println("Chamada da Função for detectada"); :}
        | RP expressao_booleana final_linha atribuicao_de_variavel LP FOR final_linha bloco_comandos {: System.out.println("Chamada da Função for detectada"); :}
        ;

comando_while ::= RP expressao_booleana LP WHILE final_linha bloco_comandos {: System.out.println("Chamada da Função while detectada"); :};

declaracao_de_variavel ::= expressao_aritmetica:a SEMI bloco_string:s tipo:t final_linha 
                            {:  System.out.println("Declaração da variavel: " + s +", com valor: " + a + " e tipo: "+ t);
                                erro = analyser.verificarAtribuicao(s, a, t);

                                if(erro == false){
                                  table.inserirSimbolo(s, t);
                                  
                                } else {
                                  System.out.println("erro: " + erro + " Erro de semantica na declaração da variavel: " + s);
                                }
                            :}

        | ASP bloco_string:a ASP SEMI bloco_string:s tipo:t final_linha 
                            {:  System.out.println("Declaração da variavel: " + s +", com valor: " + a + " e tipo: "+ t);
                                erro = analyser.verificarAtribuicao(s, a, t);

                                if(erro == false){
                                  table.inserirSimbolo(s, t);
                                  
                                } else {
                                  System.out.println("erro: " + erro + " Erro de semantica na declaração da variavel: " + s);
                                }
                            :}

        | bloco_string:s tipo:t  final_linha {: System.out.println("Declaração da variavel: " + s + " do tipo: "+ t); table.inserirSimbolo(s, t);  table.inserirSimbolo(s, t); :}
        | bloco_string:s2 SEMI bloco_string:s1 tipo:t  final_linha
                            {: System.out.println("Declaração da variavel: " + s1 + " do tipo: "+ t + " Recebe o valor de: " + s2); 
                                erro = analyser.verificarTipos(t, table.getTipo(s2));
                                if(erro == false){
                                  table.inserirSimbolo(s1, t);
                                  
                                } else {
                                  System.out.println("Erro de semantica na declaração da variavel: " + s1);
                                }

                            :}



        ;

atribuicao_de_variavel ::= expressao_aritmetica:a SEMI bloco_string:s final_linha
                            {:  System.out.println("A variavel "+ s +" Recebe o valor: " + a);
                                  erro = analyser.verificarAtribuicao(s, a, table.getTipo(s));
                                  if(erro == true){
                                    System.out.println("Erro de semantica na atribuicao de variavel: " + s);
                                  }
                            :}

        | bloco_string:s1 SEMI bloco_string:s2 final_linha 
                            {:  System.out.println("A variavel "+ s2 +" Recebe o valor da variavel: " + s1); 
                                erro = analyser.verificarTipos(table.getTipo(s1), table.getTipo(s2));
                            :}

        | ASP bloco_string:s1 ASP SEMI bloco_string:s2 final_linha 
                            {:  System.out.println("A variavel "+ s2 +" Recebe o valor da variavel: " + s1); 
                                erro = analyser.verificarAtribuicao(s2, s1, table.getTipo(s2));
                            :}
        
        | comando_scanf:s1 SEMI bloco_string:s2 final_linha {: System.out.println("A variavel "+ s2 +" Recebe o valor: " + s1); tipo = table.getTipo(s2); :}
        | error                                                                                   {: System.out.println("Erro de sintaxe na atribuicao de variavel!"); :}
        ;

expressao_aritmetica ::= expressao_aritmetica:e1 operador_aritimetico:op expressao_aritmetica:e2    {: RESULT = e1 + " " + op + " " + e2; System.out.println("Espressao aritmetica detectada: ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | bloco_string:e1 operador_aritimetico:op expressao_aritmetica:e2                           {: RESULT = e1 + " " + op + " " + e2; System.out.println("Espressao aritmetica detectada: ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | bloco_string:e1 operador_aritimetico:op bloco_string:e2                                   {: RESULT = e1 + " " + op + " " + e2; System.out.println("Espressao aritmetica detectada: ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | expressao_aritmetica:e1 operador_aritimetico:op bloco_string:e2                           {: RESULT = e1 + " " + op + " " + e2; System.out.println("Espressao aritmetica detectada: ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
	      | RP expressao_aritmetica:e LP                                                              {: RESULT = ") " + e + " (";         System.out.println("Espressao aritmetica entre parenteses detectada: " + RESULT); :}
        | NUMBER:n                                                                                  {: RESULT = n; :}
	      | error                                                                                     {: System.out.println("Erro de sintaxe na expressao aritmetica!"); :}
	      ;

operador_aritimetico ::= ADD {: RESULT = "+"; :}
        | SUB {: RESULT = "-"; :} 
        | MTP {: RESULT = "*"; :}
        | DIV {: RESULT = "/"; :}
        | MOD {: RESULT = "%"; :}
        ;

expressao_booleana ::= expressao_aritmetica:e1 operador_booleano:op expressao_aritmetica:e2       {: RESULT = e1 + " " + op + " " + e2; System.out.println("Expressao booleana ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | bloco_string:e1 operador_booleano:op expressao_aritmetica:e2                            {: RESULT = e1 + " " + op + " " + e2; System.out.println("Expressao booleana ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | bloco_string:e1 operador_booleano:op bloco_string:e2                                    {: RESULT = e1 + " " + op + " " + e2; System.out.println("Expressao booleana ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
        | expressao_aritmetica:e1 operador_booleano:op bloco_string:e2                            {: RESULT = e1 + " " + op + " " + e2; System.out.println("Expressao booleana ) " + e1 + " " + op + " " + e2 + " ( \t\tResultado: "+ RESULT); :}
	      ;


operador_booleano ::= EQ {: RESULT = "=="; :}
        | NEQ {: RESULT = "!="; :}
        | LT  {: RESULT = "<" ; :} 
        | LTE {: RESULT = "<="; :}
        | GTE {: RESULT = ">="; :}
        | GT  {: RESULT = ">" ; :}
        ;

final_linha::= EOL
        | EOLD
        | error     {: System.out.println("Erro de sintaxe ao terminar a linha, provavel falta de carecter de final de linha"); :}
        ;

bloco_string ::= bloco_string:s1 STRING:s2   {: RESULT = s1 + " " +s2; :}
        | STRING:s    {: RESULT = s; :}
        ;

tipo ::= NB   {: RESULT = "number"; :}
        | NB NB   {: RESULT = "number number"; :} 
        | CH      {: RESULT = "char"; :}
        | CH CH   {: RESULT = "char char"; :}
        ;



